setwd("C:/Users/anany/Dropbox/Data Analytics/F25-DataAnalytics/Assignment 2")
setwd("C:/Users/anany/Dropbox/Data Analytics/F25-DataAnalytics/Assignment 2")
library(readr)
epi.data <- read.csv("epi_results_2024_pop_gdp_v2.csv")
view(epi.data)
library(readr)
library(EnvStats)
library(nortest)
epi.data <- read.csv("epi_results_2024_pop_gdp_v2.csv")
view(epi.data)
View(epi.data)
epi.data <- read_csv("epi_results_2024_pop_gdp.csv")
View(epi.data)
View(epi.data)
region1 <- subset(epi.data, region == "Southern Asia")
region2 <- subset(epi.data, region == "Latin America & Caribbean")
ggplot(region1, aes(y = gdp)) +
geom_boxplot(fill = "pink") +
labs(title = "GDP Distribution - Sub-Saharan Africa")
library(ggplot2)
ggplot(region1, aes(y = gdp)) +
geom_boxplot(fill = "pink") +
labs(title = "GDP Distribution - Sub-Saharan Africa")
ggplot(region2, aes(y = gdp)) +
geom_boxplot(fill = "darkorchid") +
labs(title = "GDP Distribution - Latin America & Caribbean")
hist(region1$gdp)
#hist(region1$gdp)
ggplot(region1, aes(x=gdp)) +
geom_histogram(fill = "pink", binwidth = 3)
#hist(region1$gdp)
ggplot(region1, aes(x=gdp)) +
geom_histogram(fill = "pink", binwidth = 20)
#hist(region1$gdp)
ggplot(region1, aes(x=gdp)) +
geom_histogram(fill = "pink")
#hist(region1$gdp)
ggplot(region1, aes(y=gdp)) +
geom_histogram(fill = "pink")
ggplot(region1, aes(y = gdp)) +
geom_boxplot(fill = "pink") +
labs(title = "GDP Distribution - Southern Asia")
ggplot(region1, aes(y=gdp)) +
geom_histogram(aes(y = ..density..), bins = 20, fill = "skyblue", color = "black") +
geom_density(color = "pink", size = 1) +
labs(title = "GDP Histogram - Southern Asia")
ggplot(region1, aes(y=gdp)) +
geom_histogram(aes(y = ..density..),fill = "skyblue", color = "black") +
geom_density(color = "pink") +
labs(title = "GDP Histogram - Southern Asia")
ggplot(region1, aes(x=gdp)) +
geom_histogram(aes(y = ..density..),fill = "skyblue", color = "black") +
geom_density(color = "pink") +
labs(title = "GDP Histogram - Southern Asia")
ggplot(region1, aes(x=gdp)) +
geom_histogram(aes(y = ..density..),bins = 20, fill = "pink", color = "black") +
geom_density(color = "pink", size = 1) +
labs(title = "GDP Histogram - Southern Asia")
ggplot(region1, aes(x=gdp)) +
geom_histogram(aes(y = ..density..),bins = 20, fill = "pink", color = "black") +
geom_density(color = "green", size = 1) +
labs(title = "GDP Histogram - Southern Asia")
ggplot(region1, aes(x=gdp)) +
geom_histogram(aes(y = ..density..),bins = 10, fill = "pink", color = "black") +
geom_density(color = "green", size = 1) +
labs(title = "GDP Histogram - Southern Asia")
ggplot(region1, aes(x=gdp)) +
geom_histogram(aes(y = ..density..),bins = 5, fill = "pink", color = "black") +
geom_density(color = "green", size = 1) +
labs(title = "GDP Histogram - Southern Asia")
ggplot(region1, aes(x=gdp)) +
geom_histogram(aes(y = ..density..),bins = 15, fill = "pink", color = "black") +
geom_density(color = "green", size = 1) +
labs(title = "GDP Histogram - Southern Asia")
ggplot(region1, aes(x=gdp)) +
geom_histogram(aes(y = ..density..),bins = 21, fill = "pink", color = "black") +
geom_density(color = "green", size = 1) +
labs(title = "GDP Histogram - Southern Asia")
ggplot(region1, aes(x=gdp)) +
geom_histogram(aes(y = ..density..),bins = 100, fill = "pink", color = "black") +
geom_density(color = "green", size = 1) +
labs(title = "GDP Histogram - Southern Asia")
ggplot(region1, aes(x=gdp)) +
geom_histogram(aes(y = ..density..),bins = 25, fill = "pink", color = "black") +
geom_density(color = "green", size = 1) +
labs(title = "GDP Histogram - Southern Asia")
ggplot(region1, aes(x = gdp)) +
geom_histogram(fill = "skyblue", color = "black", bins = 20) +
labs(title = "Histogram of GDP (Counts)",
x = "GDP", y = "Count")
ggplot(region1, aes(x=gdp)) +
geom_histogram(aes(y = ..density..),bins = 25, fill = "pink", color = "black") + #scaled
geom_density(color = "green", size = 1) +
labs(title = "GDP Histogram - Southern Asia")
ggplot(region2, aes(x=gdp)) +
geom_histogram(aes(y = ..density..),bins = 25, fill = "darkorchid", color = "black") + #scaled
geom_density(color = "green", size = 1) +
labs(title = "GDP Histogram - Latin America & Caribbean")
qqPlot(region1$gdp, region2$gdp,
main = "QQ Plot of GDP between Southern Asia and Latin America & Caribbean",
xlab = "Southern Asian GDP Quantiles",
ylab = "Latin America & Caribbean GDP Quantiles")
lin.mod0 <- lm(EPI.new~gdp,epi.data)
summary(lin.mod0)
lin.mod0 <- lm(EPI.new~gdp,epi.data)
summary(lin.mod0)
epi.data$log_gdp <- log10(gdp)
gdp <- epi.data$gdp
epi.data$log_gdp <- log10(gdp)
ggplot(epi.data, aes(x = log_gdp, y = EPI.new, colour = region)) +
geom_point()
ggplot(epi.data, aes(x = gdp, y = EPI.new)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(epi.data, aes(x = log_gdp, y = EPI.new)) +
geom_point() +
stat_smooth(method = "lm")
gdp <- epi.data$gdp
ggplot(epi.data, aes(x = gdp, y = EPI.new, colour = region)) +
geom_point()
lin.mod1 <- lm(EPI.new~log_gdp,epi.data)
summary(lin.mod1)
ggplot(epi.data, aes(x = log_gdp, y = EPI.new)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(lin.mod1, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
labs(title='Residual vs. Fitted Values Plot', x='Fitted Values', y='Residuals')
gdp <- epi.data$gdp
ggplot(epi.data, aes(x = gdp, y = EPI.new, colour = region)) +
geom_point()
epi.data$log_gdp <- log10(gdp)
lin.mod1 <- lm(EPI.new~log_gdp,epi.data)
summary(lin.mod1)
ggplot(epi.data, aes(x = log_gdp, y = EPI.new)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(lin.mod1, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
labs(title='Residual vs. Fitted Values Plot', x='Fitted Values', y='Residuals')
ggplot(region1, aes(x = log_gdp, y = EPI.new, colour = region, label=country)) +
geom_point() + geom_text(hjust=0, vjust=0)
epi.data$fitted1 <- fitted(lin.mod1)
epi.data$resid1  <- resid(lin.mod1)
epi.data$log_gdp <- log10(epi.data$gdp)
ggplot(region1, aes(x = log_gdp, y = EPI.new, colour = region, label=country)) +
geom_point() + geom_text(hjust=0, vjust=0)
epi.data$log_gdp <- log10(epi.data$gdp)
region1 <- subset(epi.data, region == "Southern Asia")
ggplot(region1, aes(x = log_gdp, y = EPI.new, colour = region, label=country)) +
geom_point() + geom_text(hjust=0, vjust=0)
region1$log_gdp <- log10(region1$gdp)
ggplot(region1, aes(x = log_gdp, y = EPI.new, colour = region, label=country)) +
geom_point() + geom_text(hjust=0, vjust=0)
ggplot(region1, aes(x = log_gdp, y = EPI.new, label = country)) +
geom_point(color = "steelblue") +
geom_text_repel(size = 3, max.overlaps = 25) +
labs(title = "EPI.new vs log10(GDP) — Southern Asia",
x = "log10(GDP)", y = "EPI.new")
library(ggrepel)
ggplot(region1, aes(x = log_gdp, y = EPI.new, label = country)) +
geom_point(color = "steelblue") +
geom_text_repel(size = 3, max.overlaps = 25) +
labs(title = "EPI.new vs log10(GDP) — Southern Asia",
x = "log10(GDP)", y = "EPI.new")
ggplot(region1, aes(x = log_gdp, y = EPI.new, colour = region, label=country)) +
geom_point(color = "") #+ geom_text(hjust=0, vjust=0)
ggplot(region1, aes(x = log_gdp, y = EPI.new, colour = region, label=country)) +
geom_point(color = "darkseagreen1") #+ geom_text(hjust=0, vjust=0)
#given by chatgpt because I had formatting issues with the other version
ggplot(region1, aes(x = log_gdp, y = EPI.new, label = country)) +
geom_point(color = "darkseagreen1") +
geom_text_repel(size = 3, max.overlaps = 25) +
labs(title = "EPI.new vs log10(GDP) — Southern Asia",
x = "log10(GDP)", y = "EPI.new")
#given by chatgpt because I had formatting issues with the other version
ggplot(region1, aes(x = log_gdp, y = EPI.new, label = country)) +
geom_point(color = "chocolate4") +
geom_text_repel(size = 3, max.overlaps = 25) +
labs(title = "EPI.new vs log10(GDP) — Southern Asia",
x = "log10(GDP)", y = "EPI.new")
ggplot(region1, aes(x = gdp, y = EPI.new, colour = region)) +
geom_point()
summary(lin.mod2)
lin.mod2 <- lm(EPI.new~log_gdp,region1)
summary(lin.mod2)
ggplot(region1, aes(x = log_gdp, y = EPI.new)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(region1, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
labs(title='Residual vs. Fitted Values Plot', x='Fitted Values', y='Residuals')
#given by chatgpt because I had formatting issues with the other version
ggplot(region1, aes(x = log_gdp, y = EPI.new, label = country)) +
geom_point(color = "chocolate4") +
geom_text_repel(size = 3, max.overlaps = 25) +
labs(title = "EPI.new vs log10(GDP) — Southern Asia",
x = "log10(GDP)", y = "EPI.new")
##convert region from strings to factors
epi.data$region <- as.factor(epi.data$region)
summary(epi.data$region)
epi.data.subset <- epi.data[ epi.data$region %in% c("Southern Asia"),]
summary(epi.data.subset)
summary(epi.data.subset$log_gdp)
ggplot(epi.data.subset, aes(x = log_gdp, y = EPI.new, colour = region, label=country)) +
geom_point() + geom_text(hjust=0, vjust=0)
lin.mod2 <- lm(log_gdp~EPI.new,epi.data.subset)
summary(lin.mod2)
ggplot(epi.data.subset, aes(x = log_gdp, y = EPI.new)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(lin.mod2, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
labs(title='Residual vs. Fitted Values Plot', x='Fitted Values', y='Residuals')
library(GGally)
library(psych)
library(cluster)
library(dendextend)
library(colorspace)
library(factoextra)
View(epi.data)
library(class)
epi.clean <- epi.data[complete.cases(epi.data[, c("region", "EPI.new", "ECO.new", "BDH.new")]), ]
View(epi.clean)
vars1 <- c("EPI.new", "ECO.new", "BDH.new")
vars1 <- c("EPI.new", "ECO.new", "BDH.new")
train1 <- epi.clean[, vars1]
labels <- epi.clean$region
k_values <- c(3, 5, 7, 9)
results1 <- list()
#3. Classification (kNN)
epi.clean <- epi.data[complete.cases(epi.data[, c("region", "EPI.new", "ECO.new", "BDH.new")]), ]
vars1 <- c("EPI.new", "ECO.new", "BDH.new", "region")
model.data1 <- epi.clean[, vars1]
set.seed(123)  # for reproducibility
split.rat <- 0.7
train.indexes <- sample(nrow(model.data1), split.rat * nrow(model.data1))
train1 <- model.data1[train.indexes, ]
test1 <- model.data1[-train.indexes, ]
for(k in k_values) {
# Train kNN model using caret
mod.knn <- train(region ~ ., data = train1, method = "knn",
tuneGrid = data.frame(k = k),
trControl = trainControl(method = "none"))
# Predict on test set
knn.test.predicted <- predict(mod.knn, test1[, -4])
# Create confusion matrix
conf.mat <- as.matrix(table(Actual = test1$region, Predicted = knn.test.predicted))
# Calculate accuracy
accuracy <- sum(diag(conf.mat)) / sum(conf.mat)
cat("\n--- k =", k, "---\n")
print(conf.mat)
cat("\nAccuracy:", round(accuracy, 4), "\n")
cat("Correctly classified:", sum(diag(conf.mat)), "out of", sum(conf.mat), "\n")
# Track best k
if(accuracy > best_accuracy) {
best_accuracy <- accuracy
best_k <- k
}
}
library(caret)
for(k in k_values) {
# Train kNN model using caret
mod.knn <- train(region ~ ., data = train1, method = "knn",
tuneGrid = data.frame(k = k),
trControl = trainControl(method = "none"))
# Predict on test set
knn.test.predicted <- predict(mod.knn, test1[, -4])
# Create confusion matrix
conf.mat <- as.matrix(table(Actual = test1$region, Predicted = knn.test.predicted))
# Calculate accuracy
accuracy <- sum(diag(conf.mat)) / sum(conf.mat)
cat("\n--- k =", k, "---\n")
print(conf.mat)
cat("\nAccuracy:", round(accuracy, 4), "\n")
cat("Correctly classified:", sum(diag(conf.mat)), "out of", sum(conf.mat), "\n")
# Track best k
if(accuracy > best_accuracy) {
best_accuracy <- accuracy
best_k <- k
}
}
cat("\n\nBest k for Model 1:", best_k, "with accuracy:", round(best_accuracy, 4), "\n")
epi.clean2 <- epi.data[complete.cases(epi.data[, c("region", "MKP.new", "MHP.new", "MPE.new")]), ]
vars2 <- c("MKP.new", "MHP.new", "MPE.new", "region")
model.data2 <- epi.clean2[, vars2]
# Use same train/test split
set.seed(123)  # same seed for fair comparison
train.indexes2 <- sample(nrow(model.data2), split.rat * nrow(model.data2))
train2 <- model.data2[train.indexes2, ]
test2 <- model.data2[-train.indexes2, ]
# Train with best k from Model 1
mod.knn2 <- train(region ~ ., data = train2, method = "knn",
tuneGrid = data.frame(k = best_k),
trControl = trainControl(method = "none"))
# Predict on test set
knn.test.predicted2 <- predict(mod.knn2, test2[, -4])
#3. Classification (kNN)
epi.clean <- epi.data[complete.cases(epi.data[, c("region", "EPI.new", "ECO.new", "BDH.new")]), ]
# Select 3 variables: EPI.new, ECO.new, BDH.new
vars1 <- c("EPI.new", "ECO.new", "BDH.new", "region")
model.data1 <- epi.clean[, vars1]
# Split into train/test (70/30 split)
set.seed(123)  # for reproducibility
split.rat <- 0.7
train.indexes <- sample(nrow(model.data1), split.rat * nrow(model.data1))
train1 <- model.data1[train.indexes, ]
test1 <- model.data1[-train.indexes, ]
cat("=== MODEL 1: EPI.new, ECO.new, BDH.new ===\n\n")
# Try different k values
k_values <- c(3, 5, 7, 9, 11)
best_accuracy <- 0
best_k <- 3
for(k in k_values) {
# Train kNN model using caret
mod.knn <- train(region ~ ., data = train1, method = "knn",
tuneGrid = data.frame(k = k),
trControl = trainControl(method = "none"))
# Predict on test set
knn.test.predicted <- predict(mod.knn, test1[, -4])
# Create confusion matrix
conf.mat <- as.matrix(table(Actual = test1$region, Predicted = knn.test.predicted))
# Calculate accuracy
accuracy <- sum(diag(conf.mat)) / sum(conf.mat)
cat("\n--- k =", k, "---\n")
print(conf.mat)
cat("\nAccuracy:", round(accuracy, 4), "\n")
cat("Correctly classified:", sum(diag(conf.mat)), "out of", sum(conf.mat), "\n")
# Track best k
if(accuracy > best_accuracy) {
best_accuracy <- accuracy
best_k <- k
}
}
set.seed(123)  # same seed for fair comparison
train.indexes2 <- sample(nrow(model.data2), split.rat * nrow(model.data2))
train2 <- model.data2[train.indexes2, ]
test2 <- model.data2[-train.indexes2, ]
mod.knn2 <- train(region ~ ., data = train2, method = "knn",
tuneGrid = data.frame(k = best_k),
trControl = trainControl(method = "none"))
# Predict on test set
knn.test.predicted2 <- predict(mod.knn2, test2[, -4])
# Create confusion matrix
conf.mat2 <- as.matrix(table(Actual = test2$region, Predicted = knn.test.predicted2))
# Calculate accuracy
accuracy2 <- sum(diag(conf.mat2)) / sum(conf.mat2)
cat("\n--- k =", best_k, "---\n")
print(conf.mat2)
cat("\nAccuracy:", round(accuracy2, 4), "\n")
cat("Correctly classified:", sum(diag(conf.mat2)), "out of", sum(conf.mat2), "\n")
# Compare models
cat("\n\n=== MODEL COMPARISON ===\n")
cat("Model 1 (EPI.new, ECO.new, BDH.new) Accuracy:", round(best_accuracy, 4), "\n")
cat("Model 2 (MKP.new, MHP.new, MPE.new) Accuracy:", round(accuracy2, 4), "\n\n")
if(best_accuracy > accuracy2) {
cat("CONCLUSION: Model 1 performs better with",
round((best_accuracy - accuracy2)*100, 2),
"percentage points higher accuracy, suggesting that overall environmental performance indicators (EPI, ECO, BDH) are more effective at distinguishing regions than marine and habitat protection metrics.\n")
} else {
cat("CONCLUSION: Model 2 performs better with",
round((accuracy2 - best_accuracy)*100, 2),
"percentage points higher accuracy, suggesting that marine and habitat protection metrics (MKP, MHP, MPE) are more effective at distinguishing regions than overall environmental performance indicators.\n")
}
